#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyClinic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Clinic")]
	public partial class LINQToSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertVoivodeship(Voivodeship instance);
    partial void UpdateVoivodeship(Voivodeship instance);
    partial void DeleteVoivodeship(Voivodeship instance);
    partial void InsertClinicEmployee(ClinicEmployee instance);
    partial void UpdateClinicEmployee(ClinicEmployee instance);
    partial void DeleteClinicEmployee(ClinicEmployee instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    partial void InsertMedicalSpecialist(MedicalSpecialist instance);
    partial void UpdateMedicalSpecialist(MedicalSpecialist instance);
    partial void DeleteMedicalSpecialist(MedicalSpecialist instance);
    partial void InsertMedicalExamination(MedicalExamination instance);
    partial void UpdateMedicalExamination(MedicalExamination instance);
    partial void DeleteMedicalExamination(MedicalExamination instance);
    partial void InsertMedicalService(MedicalService instance);
    partial void UpdateMedicalService(MedicalService instance);
    partial void DeleteMedicalService(MedicalService instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertPrescribedMedicine(PrescribedMedicine instance);
    partial void UpdatePrescribedMedicine(PrescribedMedicine instance);
    partial void DeletePrescribedMedicine(PrescribedMedicine instance);
    #endregion
		
		public LINQToSQLDataContext() : 
				base(global::MyClinic.Properties.Settings.Default.ClinicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQToSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQToSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQToSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQToSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Voivodeship> Voivodeships
		{
			get
			{
				return this.GetTable<Voivodeship>();
			}
		}
		
		public System.Data.Linq.Table<ClinicEmployee> ClinicEmployees
		{
			get
			{
				return this.GetTable<ClinicEmployee>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		public System.Data.Linq.Table<MedicalSpecialist> MedicalSpecialists
		{
			get
			{
				return this.GetTable<MedicalSpecialist>();
			}
		}
		
		public System.Data.Linq.Table<MedicalExamination> MedicalExaminations
		{
			get
			{
				return this.GetTable<MedicalExamination>();
			}
		}
		
		public System.Data.Linq.Table<MedicalService> MedicalServices
		{
			get
			{
				return this.GetTable<MedicalService>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicines
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<PrescribedMedicine> PrescribedMedicines
		{
			get
			{
				return this.GetTable<PrescribedMedicine>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private int _VoivodeshipID;
		
		private EntitySet<ClinicEmployee> _ClinicEmployees;
		
		private EntitySet<Patient> _Patients;
		
		private EntityRef<Voivodeship> _Voivodeship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnVoivodeshipIDChanging(int value);
    partial void OnVoivodeshipIDChanged();
    #endregion
		
		public City()
		{
			this._ClinicEmployees = new EntitySet<ClinicEmployee>(new Action<ClinicEmployee>(this.attach_ClinicEmployees), new Action<ClinicEmployee>(this.detach_ClinicEmployees));
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._Voivodeship = default(EntityRef<Voivodeship>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoivodeshipID", DbType="Int NOT NULL")]
		public int VoivodeshipID
		{
			get
			{
				return this._VoivodeshipID;
			}
			set
			{
				if ((this._VoivodeshipID != value))
				{
					if (this._Voivodeship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVoivodeshipIDChanging(value);
					this.SendPropertyChanging();
					this._VoivodeshipID = value;
					this.SendPropertyChanged("VoivodeshipID");
					this.OnVoivodeshipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ClinicEmployee", Storage="_ClinicEmployees", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<ClinicEmployee> ClinicEmployees
		{
			get
			{
				return this._ClinicEmployees;
			}
			set
			{
				this._ClinicEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Patient", Storage="_Patients", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voivodeship_City", Storage="_Voivodeship", ThisKey="VoivodeshipID", OtherKey="VoivodeshipID", IsForeignKey=true)]
		public Voivodeship Voivodeship
		{
			get
			{
				return this._Voivodeship.Entity;
			}
			set
			{
				Voivodeship previousValue = this._Voivodeship.Entity;
				if (((previousValue != value) 
							|| (this._Voivodeship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voivodeship.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Voivodeship.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._VoivodeshipID = value.VoivodeshipID;
					}
					else
					{
						this._VoivodeshipID = default(int);
					}
					this.SendPropertyChanged("Voivodeship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClinicEmployees(ClinicEmployee entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_ClinicEmployees(ClinicEmployee entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voivodeships")]
	public partial class Voivodeship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VoivodeshipID;
		
		private string _VoivodeshipName;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVoivodeshipIDChanging(int value);
    partial void OnVoivodeshipIDChanged();
    partial void OnVoivodeshipNameChanging(string value);
    partial void OnVoivodeshipNameChanged();
    #endregion
		
		public Voivodeship()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoivodeshipID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VoivodeshipID
		{
			get
			{
				return this._VoivodeshipID;
			}
			set
			{
				if ((this._VoivodeshipID != value))
				{
					this.OnVoivodeshipIDChanging(value);
					this.SendPropertyChanging();
					this._VoivodeshipID = value;
					this.SendPropertyChanged("VoivodeshipID");
					this.OnVoivodeshipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VoivodeshipName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string VoivodeshipName
		{
			get
			{
				return this._VoivodeshipName;
			}
			set
			{
				if ((this._VoivodeshipName != value))
				{
					this.OnVoivodeshipNameChanging(value);
					this.SendPropertyChanging();
					this._VoivodeshipName = value;
					this.SendPropertyChanged("VoivodeshipName");
					this.OnVoivodeshipNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voivodeship_City", Storage="_Cities", ThisKey="VoivodeshipID", OtherKey="VoivodeshipID")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Voivodeship = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Voivodeship = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClinicEmployees")]
	public partial class ClinicEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Street;
		
		private string _StreetNumer;
		
		private string _PostalCode;
		
		private int _CityID;
		
		private int _PhoneNumber;
		
		private System.Data.Linq.Binary _Picture;
		
		private string _EmployeeDescription;
		
		private string _UserLogin;
		
		private string _UserPassword;
		
		private bool _Active;
		
		private int _UserGroupID;
		
		private EntitySet<MedicalSpecialist> _MedicalSpecialists;
		
		private EntitySet<MedicalExamination> _MedicalExaminations;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnStreetNumerChanging(string value);
    partial void OnStreetNumerChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnPictureChanging(System.Data.Linq.Binary value);
    partial void OnPictureChanged();
    partial void OnEmployeeDescriptionChanging(string value);
    partial void OnEmployeeDescriptionChanged();
    partial void OnUserLoginChanging(string value);
    partial void OnUserLoginChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnUserGroupIDChanging(int value);
    partial void OnUserGroupIDChanged();
    #endregion
		
		public ClinicEmployee()
		{
			this._MedicalSpecialists = new EntitySet<MedicalSpecialist>(new Action<MedicalSpecialist>(this.attach_MedicalSpecialists), new Action<MedicalSpecialist>(this.detach_MedicalSpecialists));
			this._MedicalExaminations = new EntitySet<MedicalExamination>(new Action<MedicalExamination>(this.attach_MedicalExaminations), new Action<MedicalExamination>(this.detach_MedicalExaminations));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetNumer", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
		public string StreetNumer
		{
			get
			{
				return this._StreetNumer;
			}
			set
			{
				if ((this._StreetNumer != value))
				{
					this.OnStreetNumerChanging(value);
					this.SendPropertyChanging();
					this._StreetNumer = value;
					this.SendPropertyChanged("StreetNumer");
					this.OnStreetNumerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeDescription", DbType="VarChar(300)")]
		public string EmployeeDescription
		{
			get
			{
				return this._EmployeeDescription;
			}
			set
			{
				if ((this._EmployeeDescription != value))
				{
					this.OnEmployeeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EmployeeDescription = value;
					this.SendPropertyChanged("EmployeeDescription");
					this.OnEmployeeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLogin", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserLogin
		{
			get
			{
				return this._UserLogin;
			}
			set
			{
				if ((this._UserLogin != value))
				{
					this.OnUserLoginChanging(value);
					this.SendPropertyChanging();
					this._UserLogin = value;
					this.SendPropertyChanged("UserLogin");
					this.OnUserLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", DbType="Int NOT NULL")]
		public int UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicEmployee_MedicalSpecialist", Storage="_MedicalSpecialists", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<MedicalSpecialist> MedicalSpecialists
		{
			get
			{
				return this._MedicalSpecialists;
			}
			set
			{
				this._MedicalSpecialists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicEmployee_MedicalExamination", Storage="_MedicalExaminations", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<MedicalExamination> MedicalExaminations
		{
			get
			{
				return this._MedicalExaminations;
			}
			set
			{
				this._MedicalExaminations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_ClinicEmployee", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.ClinicEmployees.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.ClinicEmployees.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalSpecialists(MedicalSpecialist entity)
		{
			this.SendPropertyChanging();
			entity.ClinicEmployee = this;
		}
		
		private void detach_MedicalSpecialists(MedicalSpecialist entity)
		{
			this.SendPropertyChanging();
			entity.ClinicEmployee = null;
		}
		
		private void attach_MedicalExaminations(MedicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.ClinicEmployee = this;
		}
		
		private void detach_MedicalExaminations(MedicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.ClinicEmployee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Street;
		
		private string _StreetNumer;
		
		private string _PostalCode;
		
		private int _CityID;
		
		private int _PhoneNumber;
		
		private string _PESEL;
		
		private bool _NFZ;
		
		private bool _Active;
		
		private int _UserGroupID;
		
		private EntitySet<Visit> _Visits;
		
		private EntitySet<MedicalExamination> _MedicalExaminations;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStreetChanging(string value);
    partial void OnStreetChanged();
    partial void OnStreetNumerChanging(string value);
    partial void OnStreetNumerChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    partial void OnNFZChanging(bool value);
    partial void OnNFZChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnUserGroupIDChanging(int value);
    partial void OnUserGroupIDChanged();
    #endregion
		
		public Patient()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._MedicalExaminations = new EntitySet<MedicalExamination>(new Action<MedicalExamination>(this.attach_MedicalExaminations), new Action<MedicalExamination>(this.detach_MedicalExaminations));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Street", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._Street;
			}
			set
			{
				if ((this._Street != value))
				{
					this.OnStreetChanging(value);
					this.SendPropertyChanging();
					this._Street = value;
					this.SendPropertyChanged("Street");
					this.OnStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetNumer", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
		public string StreetNumer
		{
			get
			{
				return this._StreetNumer;
			}
			set
			{
				if ((this._StreetNumer != value))
				{
					this.OnStreetNumerChanging(value);
					this.SendPropertyChanging();
					this._StreetNumer = value;
					this.SendPropertyChanged("StreetNumer");
					this.OnStreetNumerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostalCode", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="NVarChar(11) NOT NULL", CanBeNull=false)]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NFZ", DbType="Bit NOT NULL")]
		public bool NFZ
		{
			get
			{
				return this._NFZ;
			}
			set
			{
				if ((this._NFZ != value))
				{
					this.OnNFZChanging(value);
					this.SendPropertyChanging();
					this._NFZ = value;
					this.SendPropertyChanged("NFZ");
					this.OnNFZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", DbType="Int NOT NULL")]
		public int UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Visits", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalExamination", Storage="_MedicalExaminations", ThisKey="PatientID", OtherKey="PatientID")]
		public EntitySet<MedicalExamination> MedicalExaminations
		{
			get
			{
				return this._MedicalExaminations;
			}
			set
			{
				this._MedicalExaminations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Patient", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_MedicalExaminations(MedicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_MedicalExaminations(MedicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visits")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisitID;
		
		private int _PatientID;
		
		private int _MedicalSpecialistID;
		
		private string _DiseaseClassification;
		
		private string _VisitDescription;
		
		private System.DateTime _VisitDate;
		
		private EntitySet<PrescribedMedicine> _PrescribedMedicines;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<MedicalSpecialist> _MedicalSpecialist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnMedicalSpecialistIDChanging(int value);
    partial void OnMedicalSpecialistIDChanged();
    partial void OnDiseaseClassificationChanging(string value);
    partial void OnDiseaseClassificationChanged();
    partial void OnVisitDescriptionChanging(string value);
    partial void OnVisitDescriptionChanged();
    partial void OnVisitDateChanging(System.DateTime value);
    partial void OnVisitDateChanged();
    #endregion
		
		public Visit()
		{
			this._PrescribedMedicines = new EntitySet<PrescribedMedicine>(new Action<PrescribedMedicine>(this.attach_PrescribedMedicines), new Action<PrescribedMedicine>(this.detach_PrescribedMedicines));
			this._Patient = default(EntityRef<Patient>);
			this._MedicalSpecialist = default(EntityRef<MedicalSpecialist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalSpecialistID", DbType="Int NOT NULL")]
		public int MedicalSpecialistID
		{
			get
			{
				return this._MedicalSpecialistID;
			}
			set
			{
				if ((this._MedicalSpecialistID != value))
				{
					if (this._MedicalSpecialist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalSpecialistIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalSpecialistID = value;
					this.SendPropertyChanged("MedicalSpecialistID");
					this.OnMedicalSpecialistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiseaseClassification", DbType="VarChar(10)")]
		public string DiseaseClassification
		{
			get
			{
				return this._DiseaseClassification;
			}
			set
			{
				if ((this._DiseaseClassification != value))
				{
					this.OnDiseaseClassificationChanging(value);
					this.SendPropertyChanging();
					this._DiseaseClassification = value;
					this.SendPropertyChanged("DiseaseClassification");
					this.OnDiseaseClassificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDescription", DbType="VarChar(500)")]
		public string VisitDescription
		{
			get
			{
				return this._VisitDescription;
			}
			set
			{
				if ((this._VisitDescription != value))
				{
					this.OnVisitDescriptionChanging(value);
					this.SendPropertyChanging();
					this._VisitDescription = value;
					this.SendPropertyChanged("VisitDescription");
					this.OnVisitDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime VisitDate
		{
			get
			{
				return this._VisitDate;
			}
			set
			{
				if ((this._VisitDate != value))
				{
					this.OnVisitDateChanging(value);
					this.SendPropertyChanging();
					this._VisitDate = value;
					this.SendPropertyChanged("VisitDate");
					this.OnVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_PrescribedMedicine", Storage="_PrescribedMedicines", ThisKey="VisitID", OtherKey="VisitID")]
		public EntitySet<PrescribedMedicine> PrescribedMedicines
		{
			get
			{
				return this._PrescribedMedicines;
			}
			set
			{
				this._PrescribedMedicines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalSpecialist_Visit", Storage="_MedicalSpecialist", ThisKey="MedicalSpecialistID", OtherKey="MedicalSpecialistID", IsForeignKey=true)]
		public MedicalSpecialist MedicalSpecialist
		{
			get
			{
				return this._MedicalSpecialist.Entity;
			}
			set
			{
				MedicalSpecialist previousValue = this._MedicalSpecialist.Entity;
				if (((previousValue != value) 
							|| (this._MedicalSpecialist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalSpecialist.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._MedicalSpecialist.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._MedicalSpecialistID = value.MedicalSpecialistID;
					}
					else
					{
						this._MedicalSpecialistID = default(int);
					}
					this.SendPropertyChanged("MedicalSpecialist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrescribedMedicines(PrescribedMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Visit = this;
		}
		
		private void detach_PrescribedMedicines(PrescribedMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Visit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalSpecialists")]
	public partial class MedicalSpecialist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicalSpecialistID;
		
		private int _MedicalSpecializationID;
		
		private int _EmployeeID;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<ClinicEmployee> _ClinicEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicalSpecialistIDChanging(int value);
    partial void OnMedicalSpecialistIDChanged();
    partial void OnMedicalSpecializationIDChanging(int value);
    partial void OnMedicalSpecializationIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public MedicalSpecialist()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._ClinicEmployee = default(EntityRef<ClinicEmployee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalSpecialistID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicalSpecialistID
		{
			get
			{
				return this._MedicalSpecialistID;
			}
			set
			{
				if ((this._MedicalSpecialistID != value))
				{
					this.OnMedicalSpecialistIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalSpecialistID = value;
					this.SendPropertyChanged("MedicalSpecialistID");
					this.OnMedicalSpecialistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalSpecializationID", DbType="Int NOT NULL")]
		public int MedicalSpecializationID
		{
			get
			{
				return this._MedicalSpecializationID;
			}
			set
			{
				if ((this._MedicalSpecializationID != value))
				{
					this.OnMedicalSpecializationIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalSpecializationID = value;
					this.SendPropertyChanged("MedicalSpecializationID");
					this.OnMedicalSpecializationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._ClinicEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalSpecialist_Visit", Storage="_Visits", ThisKey="MedicalSpecialistID", OtherKey="MedicalSpecialistID")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicEmployee_MedicalSpecialist", Storage="_ClinicEmployee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public ClinicEmployee ClinicEmployee
		{
			get
			{
				return this._ClinicEmployee.Entity;
			}
			set
			{
				ClinicEmployee previousValue = this._ClinicEmployee.Entity;
				if (((previousValue != value) 
							|| (this._ClinicEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicEmployee.Entity = null;
						previousValue.MedicalSpecialists.Remove(this);
					}
					this._ClinicEmployee.Entity = value;
					if ((value != null))
					{
						value.MedicalSpecialists.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("ClinicEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.MedicalSpecialist = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.MedicalSpecialist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalExaminations")]
	public partial class MedicalExamination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicalExaminationID;
		
		private System.Nullable<int> _EmployeeID;
		
		private int _MedicalServiceID;
		
		private int _PatientID;
		
		private System.DateTime _ExaminationDate;
		
		private string _ExaminationDescription;
		
		private EntityRef<ClinicEmployee> _ClinicEmployee;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<MedicalService> _MedicalService;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicalExaminationIDChanging(int value);
    partial void OnMedicalExaminationIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnMedicalServiceIDChanging(int value);
    partial void OnMedicalServiceIDChanged();
    partial void OnPatientIDChanging(int value);
    partial void OnPatientIDChanged();
    partial void OnExaminationDateChanging(System.DateTime value);
    partial void OnExaminationDateChanged();
    partial void OnExaminationDescriptionChanging(string value);
    partial void OnExaminationDescriptionChanged();
    #endregion
		
		public MedicalExamination()
		{
			this._ClinicEmployee = default(EntityRef<ClinicEmployee>);
			this._Patient = default(EntityRef<Patient>);
			this._MedicalService = default(EntityRef<MedicalService>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalExaminationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicalExaminationID
		{
			get
			{
				return this._MedicalExaminationID;
			}
			set
			{
				if ((this._MedicalExaminationID != value))
				{
					this.OnMedicalExaminationIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalExaminationID = value;
					this.SendPropertyChanged("MedicalExaminationID");
					this.OnMedicalExaminationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._ClinicEmployee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalServiceID", DbType="Int NOT NULL")]
		public int MedicalServiceID
		{
			get
			{
				return this._MedicalServiceID;
			}
			set
			{
				if ((this._MedicalServiceID != value))
				{
					if (this._MedicalService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalServiceIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalServiceID = value;
					this.SendPropertyChanged("MedicalServiceID");
					this.OnMedicalServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
		public int PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminationDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ExaminationDate
		{
			get
			{
				return this._ExaminationDate;
			}
			set
			{
				if ((this._ExaminationDate != value))
				{
					this.OnExaminationDateChanging(value);
					this.SendPropertyChanging();
					this._ExaminationDate = value;
					this.SendPropertyChanged("ExaminationDate");
					this.OnExaminationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminationDescription", DbType="VarChar(5000)")]
		public string ExaminationDescription
		{
			get
			{
				return this._ExaminationDescription;
			}
			set
			{
				if ((this._ExaminationDescription != value))
				{
					this.OnExaminationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ExaminationDescription = value;
					this.SendPropertyChanged("ExaminationDescription");
					this.OnExaminationDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClinicEmployee_MedicalExamination", Storage="_ClinicEmployee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public ClinicEmployee ClinicEmployee
		{
			get
			{
				return this._ClinicEmployee.Entity;
			}
			set
			{
				ClinicEmployee previousValue = this._ClinicEmployee.Entity;
				if (((previousValue != value) 
							|| (this._ClinicEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClinicEmployee.Entity = null;
						previousValue.MedicalExaminations.Remove(this);
					}
					this._ClinicEmployee.Entity = value;
					if ((value != null))
					{
						value.MedicalExaminations.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClinicEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalExamination", Storage="_Patient", ThisKey="PatientID", OtherKey="PatientID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.MedicalExaminations.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.MedicalExaminations.Add(this);
						this._PatientID = value.PatientID;
					}
					else
					{
						this._PatientID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalService_MedicalExamination", Storage="_MedicalService", ThisKey="MedicalServiceID", OtherKey="MedicalServiceID", IsForeignKey=true)]
		public MedicalService MedicalService
		{
			get
			{
				return this._MedicalService.Entity;
			}
			set
			{
				MedicalService previousValue = this._MedicalService.Entity;
				if (((previousValue != value) 
							|| (this._MedicalService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalService.Entity = null;
						previousValue.MedicalExaminations.Remove(this);
					}
					this._MedicalService.Entity = value;
					if ((value != null))
					{
						value.MedicalExaminations.Add(this);
						this._MedicalServiceID = value.MedicalServiceID;
					}
					else
					{
						this._MedicalServiceID = default(int);
					}
					this.SendPropertyChanged("MedicalService");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalServices")]
	public partial class MedicalService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicalServiceID;
		
		private string _ServiceName;
		
		private string _ServiceDescription;
		
		private decimal _Price;
		
		private EntitySet<MedicalExamination> _MedicalExaminations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicalServiceIDChanging(int value);
    partial void OnMedicalServiceIDChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnServiceDescriptionChanging(string value);
    partial void OnServiceDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public MedicalService()
		{
			this._MedicalExaminations = new EntitySet<MedicalExamination>(new Action<MedicalExamination>(this.attach_MedicalExaminations), new Action<MedicalExamination>(this.detach_MedicalExaminations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalServiceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicalServiceID
		{
			get
			{
				return this._MedicalServiceID;
			}
			set
			{
				if ((this._MedicalServiceID != value))
				{
					this.OnMedicalServiceIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalServiceID = value;
					this.SendPropertyChanged("MedicalServiceID");
					this.OnMedicalServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceDescription", DbType="VarChar(300)")]
		public string ServiceDescription
		{
			get
			{
				return this._ServiceDescription;
			}
			set
			{
				if ((this._ServiceDescription != value))
				{
					this.OnServiceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ServiceDescription = value;
					this.SendPropertyChanged("ServiceDescription");
					this.OnServiceDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalService_MedicalExamination", Storage="_MedicalExaminations", ThisKey="MedicalServiceID", OtherKey="MedicalServiceID")]
		public EntitySet<MedicalExamination> MedicalExaminations
		{
			get
			{
				return this._MedicalExaminations;
			}
			set
			{
				this._MedicalExaminations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalExaminations(MedicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.MedicalService = this;
		}
		
		private void detach_MedicalExaminations(MedicalExamination entity)
		{
			this.SendPropertyChanging();
			entity.MedicalService = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicines")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicineID;
		
		private string _MedicineName;
		
		private string _Amount;
		
		private EntitySet<PrescribedMedicine> _PrescribedMedicines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicineIDChanging(int value);
    partial void OnMedicineIDChanged();
    partial void OnMedicineNameChanging(string value);
    partial void OnMedicineNameChanged();
    partial void OnAmountChanging(string value);
    partial void OnAmountChanged();
    #endregion
		
		public Medicine()
		{
			this._PrescribedMedicines = new EntitySet<PrescribedMedicine>(new Action<PrescribedMedicine>(this.attach_PrescribedMedicines), new Action<PrescribedMedicine>(this.detach_PrescribedMedicines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicineID
		{
			get
			{
				return this._MedicineID;
			}
			set
			{
				if ((this._MedicineID != value))
				{
					this.OnMedicineIDChanging(value);
					this.SendPropertyChanging();
					this._MedicineID = value;
					this.SendPropertyChanged("MedicineID");
					this.OnMedicineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MedicineName
		{
			get
			{
				return this._MedicineName;
			}
			set
			{
				if ((this._MedicineName != value))
				{
					this.OnMedicineNameChanging(value);
					this.SendPropertyChanging();
					this._MedicineName = value;
					this.SendPropertyChanged("MedicineName");
					this.OnMedicineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_PrescribedMedicine", Storage="_PrescribedMedicines", ThisKey="MedicineID", OtherKey="MedicineID")]
		public EntitySet<PrescribedMedicine> PrescribedMedicines
		{
			get
			{
				return this._PrescribedMedicines;
			}
			set
			{
				this._PrescribedMedicines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrescribedMedicines(PrescribedMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = this;
		}
		
		private void detach_PrescribedMedicines(PrescribedMedicine entity)
		{
			this.SendPropertyChanging();
			entity.Medicine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrescribedMedicines")]
	public partial class PrescribedMedicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescribedMedicineID;
		
		private int _MedicineID;
		
		private int _VisitID;
		
		private string _DrugDosage;
		
		private EntityRef<Medicine> _Medicine;
		
		private EntityRef<Visit> _Visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescribedMedicineIDChanging(int value);
    partial void OnPrescribedMedicineIDChanged();
    partial void OnMedicineIDChanging(int value);
    partial void OnMedicineIDChanged();
    partial void OnVisitIDChanging(int value);
    partial void OnVisitIDChanged();
    partial void OnDrugDosageChanging(string value);
    partial void OnDrugDosageChanged();
    #endregion
		
		public PrescribedMedicine()
		{
			this._Medicine = default(EntityRef<Medicine>);
			this._Visit = default(EntityRef<Visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescribedMedicineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescribedMedicineID
		{
			get
			{
				return this._PrescribedMedicineID;
			}
			set
			{
				if ((this._PrescribedMedicineID != value))
				{
					this.OnPrescribedMedicineIDChanging(value);
					this.SendPropertyChanging();
					this._PrescribedMedicineID = value;
					this.SendPropertyChanged("PrescribedMedicineID");
					this.OnPrescribedMedicineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicineID", DbType="Int NOT NULL")]
		public int MedicineID
		{
			get
			{
				return this._MedicineID;
			}
			set
			{
				if ((this._MedicineID != value))
				{
					if (this._Medicine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicineIDChanging(value);
					this.SendPropertyChanging();
					this._MedicineID = value;
					this.SendPropertyChanged("MedicineID");
					this.OnMedicineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisitID", DbType="Int NOT NULL")]
		public int VisitID
		{
			get
			{
				return this._VisitID;
			}
			set
			{
				if ((this._VisitID != value))
				{
					if (this._Visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisitIDChanging(value);
					this.SendPropertyChanging();
					this._VisitID = value;
					this.SendPropertyChanged("VisitID");
					this.OnVisitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugDosage", DbType="VarChar(100)")]
		public string DrugDosage
		{
			get
			{
				return this._DrugDosage;
			}
			set
			{
				if ((this._DrugDosage != value))
				{
					this.OnDrugDosageChanging(value);
					this.SendPropertyChanging();
					this._DrugDosage = value;
					this.SendPropertyChanged("DrugDosage");
					this.OnDrugDosageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medicine_PrescribedMedicine", Storage="_Medicine", ThisKey="MedicineID", OtherKey="MedicineID", IsForeignKey=true)]
		public Medicine Medicine
		{
			get
			{
				return this._Medicine.Entity;
			}
			set
			{
				Medicine previousValue = this._Medicine.Entity;
				if (((previousValue != value) 
							|| (this._Medicine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medicine.Entity = null;
						previousValue.PrescribedMedicines.Remove(this);
					}
					this._Medicine.Entity = value;
					if ((value != null))
					{
						value.PrescribedMedicines.Add(this);
						this._MedicineID = value.MedicineID;
					}
					else
					{
						this._MedicineID = default(int);
					}
					this.SendPropertyChanged("Medicine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_PrescribedMedicine", Storage="_Visit", ThisKey="VisitID", OtherKey="VisitID", IsForeignKey=true)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.PrescribedMedicines.Remove(this);
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.PrescribedMedicines.Add(this);
						this._VisitID = value.VisitID;
					}
					else
					{
						this._VisitID = default(int);
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
